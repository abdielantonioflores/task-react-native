21570bbe90ef8d64a888883512396fc5
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _hooksRedux = require("../../aplication/hooks-redux");
var _TaskListApp = require("../../slice/TaskListApp");
var _reactNative = require("react-native");
var ModalCard = function ModalCard(_ref) {
  var modalVisible = _ref.modalVisible,
    setModalVisible = _ref.setModalVisible;
  var dataAuth = (0, _hooksRedux.useAppSelector)(function (state) {
    return {
      config: state.configurationapp,
      task: state.tarkReducer
    };
  });
  var _React$useState = _react["default"].useState('Nombre de la Tarea'),
    _React$useState2 = (0, _slicedToArray2["default"])(_React$useState, 2),
    text = _React$useState2[0],
    onChangeText = _React$useState2[1];
  var dispatch = (0, _hooksRedux.useAppDispatch)();
  var saveTaskInApp = function saveTaskInApp() {
    var id = dataAuth.task.list.length - 1;
    dispatch((0, _TaskListApp.setNewTask)({
      name: text,
      id: id + 2,
      avatar: "https://cdn.fakercloud.com/avatars/josep_martins_128.jpg"
    }));
    setModalVisible(!modalVisible);
  };
  return _react["default"].createElement(_reactNative.View, null, _react["default"].createElement(_reactNative.Modal, {
    animationType: "slide",
    transparent: true,
    visible: modalVisible,
    onRequestClose: function onRequestClose() {
      _reactNative.Alert.alert('Modal has been closed.');
      setModalVisible(!modalVisible);
    }
  }, _react["default"].createElement(_reactNative.View, {
    style: styles.centeredView
  }, _react["default"].createElement(_reactNative.View, {
    style: styles.modalView
  }, _react["default"].createElement(_reactNative.SafeAreaView, null, _react["default"].createElement(_reactNative.TextInput, {
    style: styles.input,
    onChangeText: onChangeText,
    value: text
  })), _react["default"].createElement(_reactNative.Pressable, {
    style: [styles.button, styles.buttonClose],
    onPress: function onPress() {
      return saveTaskInApp();
    }
  }, _react["default"].createElement(_reactNative.Text, {
    style: styles.textStyle
  }, "Save Task"))))));
};
var styles = _reactNative.StyleSheet.create({
  container: {
    marginTop: '70%',
    alignItems: 'center',
    justifyContent: 'center'
  },
  input: {
    height: 40,
    width: '90%',
    margin: 12,
    borderWidth: 1,
    padding: 6
  },
  centeredView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 22
  },
  button: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 32,
    marginBottom: 20,
    borderRadius: 4,
    elevation: 3,
    margin: 12,
    padding: 5,
    backgroundColor: 'black'
  },
  text: {
    fontSize: 16,
    lineHeight: 21,
    fontWeight: 'bold',
    letterSpacing: 0.25,
    color: 'white'
  },
  modalView: {
    margin: 12,
    backgroundColor: 'white',
    borderRadius: 20,
    padding: 5,
    width: '90%',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5
  },
  buttonOpen: {
    backgroundColor: '#F194FF'
  },
  buttonClose: {
    backgroundColor: '#2196F3'
  },
  textStyle: {
    color: 'white',
    fontWeight: 'bold',
    textAlign: 'center'
  },
  modalText: {
    marginBottom: 15,
    textAlign: 'center'
  }
});
var _default = ModalCard;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,