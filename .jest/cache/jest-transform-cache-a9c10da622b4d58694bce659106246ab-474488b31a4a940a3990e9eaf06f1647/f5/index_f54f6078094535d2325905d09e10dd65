f7e206be263816730d206110d340ac2c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _loading = _interopRequireDefault(require("../loading/loading.aplication"));
var _hooksRedux = require("../../aplication/hooks-redux");
var _configuration = require("../../slice/configuration");
var _TaskListApp = require("../../slice/TaskListApp");
var _reactNative = require("react-native");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var ProviderAuth = function ProviderAuth(_ref) {
  var children = _ref.children;
  var dataAuth = (0, _hooksRedux.useAppSelector)(function (state) {
    return {
      config: state.configurationapp,
      task: state.tarkReducer
    };
  });
  var dispatch = (0, _hooksRedux.useAppDispatch)();
  (0, _react.useEffect)(function () {
    dispatch((0, _configuration.setIsAutheticate)(true));
    fetch('https://6172cfe5110a740017222e2b.mockapi.io/elements').then(function (response) {
      return response.json();
    }).then(function (data) {
      dispatch((0, _TaskListApp.setAddTask)(data));
    })["catch"](function (error) {
      console.error(error);
    });
  }, [dispatch]);
  return dataAuth.config.isAuthenticate.value === false ? _react["default"].createElement(_reactNative.View, {
    "data-testid": "providerComp"
  }, _react["default"].createElement(_loading["default"], null)) : _react["default"].createElement(_reactNative.View, {
    "data-testid": "providerComp"
  }, children);
};
var _default = ProviderAuth;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfbG9hZGluZyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfaG9va3NSZWR1eCIsIl9jb25maWd1cmF0aW9uIiwiX1Rhc2tMaXN0QXBwIiwiX3JlYWN0TmF0aXZlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIlByb3ZpZGVyQXV0aCIsIl9yZWYiLCJjaGlsZHJlbiIsImRhdGFBdXRoIiwidXNlQXBwU2VsZWN0b3IiLCJzdGF0ZSIsImNvbmZpZyIsImNvbmZpZ3VyYXRpb25hcHAiLCJ0YXNrIiwidGFya1JlZHVjZXIiLCJkaXNwYXRjaCIsInVzZUFwcERpc3BhdGNoIiwidXNlRWZmZWN0Iiwic2V0SXNBdXRoZXRpY2F0ZSIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwianNvbiIsImRhdGEiLCJzZXRBZGRUYXNrIiwiZXJyb3IiLCJjb25zb2xlIiwiaXNBdXRoZW50aWNhdGUiLCJ2YWx1ZSIsImNyZWF0ZUVsZW1lbnQiLCJWaWV3IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBMb2FkaW5nU2NyZWVtIGZyb20gXCIuLi9sb2FkaW5nL2xvYWRpbmcuYXBsaWNhdGlvblwiO1xyXG5pbXBvcnQgeyB1c2VBcHBEaXNwYXRjaCwgdXNlQXBwU2VsZWN0b3IgfSBmcm9tICcuLi8uLi9hcGxpY2F0aW9uL2hvb2tzLXJlZHV4J1xyXG5pbXBvcnQgeyBzZXRJc0F1dGhldGljYXRlIH0gZnJvbSAnLi4vLi4vc2xpY2UvY29uZmlndXJhdGlvbidcclxuaW1wb3J0IHsgc2V0QWRkVGFzayB9IGZyb20gJy4uLy4uL3NsaWNlL1Rhc2tMaXN0QXBwJ1xyXG5pbXBvcnQgeyBWaWV3LCBUZXh0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuaW50ZXJmYWNlIFByb3ZpZGVyQXV0aFByb3BzIHtcclxuICAgIGNoaWxkcmVuOiBhbnlcclxufVxyXG5cclxuY29uc3QgUHJvdmlkZXJBdXRoOiBSZWFjdC5GQzxQcm92aWRlckF1dGhQcm9wcz4gPSAoeyBjaGlsZHJlbiB9KSA9PiB7XHJcblxyXG4gICAgY29uc3QgZGF0YUF1dGggPSB1c2VBcHBTZWxlY3Rvcigoc3RhdGUpID0+IHtcclxuICAgICAgICByZXR1cm4geyBjb25maWc6IHN0YXRlLmNvbmZpZ3VyYXRpb25hcHAsIHRhc2s6IHN0YXRlLnRhcmtSZWR1Y2VyIH1cclxuICAgIH0pXHJcblxyXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VBcHBEaXNwYXRjaCgpO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcblxyXG4gICAgICAgIGRpc3BhdGNoKHNldElzQXV0aGV0aWNhdGUodHJ1ZSkpXHJcblxyXG4gICAgICAgIGZldGNoKCdodHRwczovLzYxNzJjZmU1MTEwYTc0MDAxNzIyMmUyYi5tb2NrYXBpLmlvL2VsZW1lbnRzJylcclxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHNldEFkZFRhc2soZGF0YSkpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9LCBbZGlzcGF0Y2hdKVxyXG5cclxuXHJcbiAgICByZXR1cm4gZGF0YUF1dGguY29uZmlnLmlzQXV0aGVudGljYXRlLnZhbHVlID09PSBmYWxzZSA/IChcclxuICAgICAgICA8VmlldyBkYXRhLXRlc3RpZD1cInByb3ZpZGVyQ29tcFwiPlxyXG4gICAgICAgICAgICA8TG9hZGluZ1NjcmVlbSAvPlxyXG4gICAgICAgIDwvVmlldz4pIDogKFxyXG4gICAgICAgIDxWaWV3IGRhdGEtdGVzdGlkPVwicHJvdmlkZXJDb21wXCI+XHJcbiAgICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICA8L1ZpZXc+XHJcblxyXG4gICAgKVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXJBdXRoO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsUUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksY0FBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssWUFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sWUFBQSxHQUFBTixPQUFBO0FBQTBDLFNBQUFPLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBVCx3QkFBQWEsR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsV0FBQUQsR0FBQSxRQUFB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