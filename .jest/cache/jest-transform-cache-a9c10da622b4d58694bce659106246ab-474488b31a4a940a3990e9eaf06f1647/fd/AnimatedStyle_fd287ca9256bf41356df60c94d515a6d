47c0c4e3a1207d839dab6e5c5f227a38
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _flattenStyle = _interopRequireDefault(require("../../StyleSheet/flattenStyle"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../NativeAnimatedHelper"));
var _AnimatedNode = _interopRequireDefault(require("./AnimatedNode"));
var _AnimatedTransform = _interopRequireDefault(require("./AnimatedTransform"));
var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var AnimatedStyle = function (_AnimatedWithChildren) {
  (0, _inherits2.default)(AnimatedStyle, _AnimatedWithChildren);
  var _super = _createSuper(AnimatedStyle);
  function AnimatedStyle(style) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedStyle);
    _this = _super.call(this);
    style = (0, _flattenStyle.default)(style) || {};
    if (style.transform) {
      style = _objectSpread(_objectSpread({}, style), {}, {
        transform: new _AnimatedTransform.default(style.transform)
      });
    }
    _this._style = style;
    return _this;
  }
  (0, _createClass2.default)(AnimatedStyle, [{
    key: "_walkStyleAndGetValues",
    value: function _walkStyleAndGetValues(style) {
      var updatedStyle = {};
      for (var key in style) {
        var value = style[key];
        if (value instanceof _AnimatedNode.default) {
          updatedStyle[key] = value.__getValue();
        } else if (value && !Array.isArray(value) && typeof value === 'object') {
          updatedStyle[key] = this._walkStyleAndGetValues(value);
        } else {
          updatedStyle[key] = value;
        }
      }
      return updatedStyle;
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      return this._walkStyleAndGetValues(this._style);
    }
  }, {
    key: "_walkStyleAndGetAnimatedValues",
    value: function _walkStyleAndGetAnimatedValues(style) {
      var updatedStyle = {};
      for (var key in style) {
        var value = style[key];
        if (value instanceof _AnimatedNode.default) {
          updatedStyle[key] = value.__getAnimatedValue();
        } else if (value && !Array.isArray(value) && typeof value === 'object') {
          updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
        }
      }
      return updatedStyle;
    }
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      return this._walkStyleAndGetAnimatedValues(this._style);
    }
  }, {
    key: "__attach",
    value: function __attach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof _AnimatedNode.default) {
          value.__addChild(this);
        }
      }
    }
  }, {
    key: "__detach",
    value: function __detach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof _AnimatedNode.default) {
          value.__removeChild(this);
        }
      }
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedStyle.prototype), "__detach", this).call(this);
    }
  }, {
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof _AnimatedNode.default) {
          value.__makeNative(platformConfig);
        }
      }
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedStyle.prototype), "__makeNative", this).call(this, platformConfig);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      var styleConfig = {};
      for (var styleKey in this._style) {
        if (this._style[styleKey] instanceof _AnimatedNode.default) {
          var style = this._style[styleKey];
          style.__makeNative(this.__getPlatformConfig());
          styleConfig[styleKey] = style.__getNativeTag();
        }
      }
      _NativeAnimatedHelper.default.validateStyles(styleConfig);
      return {
        type: 'style',
        style: styleConfig
      };
    }
  }]);
  return AnimatedStyle;
}(_AnimatedWithChildren2.default);
exports.default = AnimatedStyle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,