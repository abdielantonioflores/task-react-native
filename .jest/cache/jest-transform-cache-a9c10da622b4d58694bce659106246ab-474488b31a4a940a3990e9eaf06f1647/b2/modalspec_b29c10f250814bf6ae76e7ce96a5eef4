89a5bff8e527e7eb5773bdeca89b24e4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireWildcard(require("react"));
var _globals = require("@jest/globals");
var _react2 = require("@testing-library/react");
var _native = require("@react-navigation/native");
require("@testing-library/jest-dom");
var _comp = _interopRequireDefault(require("../app/components/modal/comp.modal"));
var _store = _interopRequireDefault(require("../app/store"));
var _reactRedux = require("react-redux");
var _jestFetchMock = _interopRequireDefault(require("jest-fetch-mock"));
var _reactNative = require("react-native");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
beforeAll(function () {
  _jestFetchMock["default"].enableMocks();
});
(0, _globals.describe)('Componet <Modal/> ', function () {
  it('Carga de Componente  de manera correcta ', (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
    var navigation, TestComponent;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _jestFetchMock["default"].mockResponse(JSON.stringify({}));
          navigation = _native.useNavigation;
          TestComponent = function TestComponent() {
            var _useState = (0, _react.useState)(false),
              _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
              modalVisible = _useState2[0],
              setModalVisible = _useState2[1];
            return _react["default"].createElement(_reactNative.View, null, _react["default"].createElement(_comp["default"], {
              modalVisible: modalVisible,
              setModalVisible: setModalVisible
            }));
          };
          (0, _react2.render)(_react["default"].createElement(_reactNative.View, null, _react["default"].createElement(_reactRedux.Provider, {
            store: _store["default"]
          }, _react["default"].createElement(TestComponent, null))));
          (0, _globals.expect)(function () {
            return _react2.screen.getByText(/Agregue su nueva  tarea /i);
          }).toThrow('Unable to find an element with text: /Agregue su nueva  tarea/i');
          (0, _globals.expect)(function () {
            return _react2.screen.getByText(/Save Task/i);
          }).toThrow('Unable to find an element with text: /Save Task/i');
        case 6:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2xvYmFscyIsIl9yZWFjdDIiLCJfbmF0aXZlIiwiX2NvbXAiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3N0b3JlIiwiX3JlYWN0UmVkdXgiLCJfamVzdEZldGNoTW9jayIsIl9yZWFjdE5hdGl2ZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJiZWZvcmVBbGwiLCJmZXRjaE1vY2siLCJlbmFibGVNb2NrcyIsImRlc2NyaWJlIiwiaXQiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVnZW5lcmF0b3IiLCJtYXJrIiwiX2NhbGxlZSIsIm5hdmlnYXRpb24iLCJUZXN0Q29tcG9uZW50Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIm1vY2tSZXNwb25zZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1c2VOYXZpZ2F0aW9uIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwibW9kYWxWaXNpYmxlIiwic2V0TW9kYWxWaXNpYmxlIiwiY3JlYXRlRWxlbWVudCIsIlZpZXciLCJyZW5kZXIiLCJQcm92aWRlciIsInN0b3JlIiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXh0IiwidG9UaHJvdyIsInN0b3AiXSwic291cmNlcyI6WyJtb2RhbC5zcGVjLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBkZXNjcmliZSwgZXhwZWN0LCB0ZXN0IH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XHJcbmltcG9ydCB7IGFjdCB9IGZyb20gJ3JlYWN0LWRvbS90ZXN0LXV0aWxzJztcclxuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xyXG5pbXBvcnQgdXNlckV2ZW50IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudCdcclxuaW1wb3J0IHsgdXNlTmF2aWdhdGlvbiB9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSdcclxuaW1wb3J0IE1vZGFsQ2FyZCBmcm9tICcuLi9hcHAvY29tcG9uZW50cy9tb2RhbC9jb21wLm1vZGFsJ1xyXG5pbXBvcnQgc3RvcmUgZnJvbSBcIi4uL2FwcC9zdG9yZVwiO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG5pbXBvcnQgZmV0Y2hNb2NrIGZyb20gJ2plc3QtZmV0Y2gtbW9jayc7XHJcbmltcG9ydCB7IHVzZUFwcERpc3BhdGNoLCB1c2VBcHBTZWxlY3RvciB9IGZyb20gJy4uL2FwcC9hcGxpY2F0aW9uL2hvb2tzLXJlZHV4J1xyXG5pbXBvcnQgeyBzZXRBZGRUYXNrIH0gZnJvbSAnLi4vYXBwL3NsaWNlL1Rhc2tMaXN0QXBwJ1xyXG5pbXBvcnQgeyBzZXRJc0F1dGhldGljYXRlIH0gZnJvbSAnLi4vYXBwL3NsaWNlL2NvbmZpZ3VyYXRpb24nXHJcbmltcG9ydCB7IFZpZXcgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5iZWZvcmVBbGwoKCkgPT4ge1xyXG4gICAgZmV0Y2hNb2NrLmVuYWJsZU1vY2tzKCk7XHJcblxyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdDb21wb25ldCA8TW9kYWwvPiAnLCAoKSA9PiB7XHJcbiAgICBpdCgnQ2FyZ2EgZGUgQ29tcG9uZW50ZSAgZGUgbWFuZXJhIGNvcnJlY3RhICcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAvLyBsZXQgZGlzcGF0Y2ggPSB1c2VBcHBEaXNwYXRjaDtcclxuICAgICAgICBmZXRjaE1vY2subW9ja1Jlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHt9KSk7XHJcblxyXG4gICAgICAgIGxldCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjtcclxuXHJcbiAgICAgICAgY29uc3QgVGVzdENvbXBvbmVudCA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgW21vZGFsVmlzaWJsZSwgc2V0TW9kYWxWaXNpYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxWaWV3PlxyXG4gICAgICAgICAgICAgICAgICAgIDxNb2RhbENhcmQgbW9kYWxWaXNpYmxlPXttb2RhbFZpc2libGV9IHNldE1vZGFsVmlzaWJsZT17c2V0TW9kYWxWaXNpYmxlfSAvPlxyXG4gICAgICAgICAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmVuZGVyKFxyXG4gICAgICAgICAgICA8Vmlldz5cclxuICAgICAgICAgICAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XHJcbiAgICAgICAgICAgICAgICA8L1Byb3ZpZGVyPlxyXG4gICAgICAgICAgICA8L1ZpZXc+XHJcblxyXG4gICAgICAgIClcclxuXHJcblxyXG4gICAgICAgIGV4cGVjdCgoKSA9PiBzY3JlZW4uZ2V0QnlUZXh0KC9BZ3JlZ3VlIHN1IG51ZXZhICB0YXJlYSAvaSkpLnRvVGhyb3coXHJcbiAgICAgICAgICAgICdVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGV4dDogL0FncmVndWUgc3UgbnVldmEgIHRhcmVhL2knLFxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICBleHBlY3QoKCkgPT4gc2NyZWVuLmdldEJ5VGV4dCgvU2F2ZSBUYXNrL2kpKS50b1Rocm93KFxyXG4gICAgICAgICAgICAnVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHRleHQ6IC9TYXZlIFRhc2svaScsXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgIH0pXHJcblxyXG5cclxuXHJcblxyXG59KVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxRQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFBRyxPQUFBLEdBQUFILE9BQUE7QUFDQUEsT0FBQTtBQUNBLElBQUFJLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUwsT0FBQTtBQUNBLElBQUFNLE1BQUEsR0FBQUQsc0JBQUEsQ0FBQUwsT0FBQTtBQUNBLElBQUFPLFdBQUEsR0FBQVAsT0FBQTtBQUNBLElBQUFRLGNBQUEsR0FBQUgsc0JBQUEsQ0FBQUwsT0FBQTtBQUlBLElBQUFTLFlBQUEsR0FBQVQsT0FBQTtBQUFvQyxTQUFBVSx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQVosd0JBQUFnQixHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsYUFBQUUsT0FBQSxDQUFBRixHQUFBLHlCQUFBQSxHQUFBLHVDQUFBQSxH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