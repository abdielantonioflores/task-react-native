{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_defineProperty2","_normalizeColor","_NativeAnimatedHelper","_AnimatedWithChildren2","_invariant","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","target","i","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","inputRange","__DEV__","checkInfiniteRange","checkValidInputRange","invariant","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","Infinity","colorToRgba","normalizedColor","normalizeColor","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","number","interpolations","shouldRound","isRgbOrRgba","replace","val","Math","round","String","startsWith","arr","pattern","message","name","AnimatedInterpolation","_AnimatedWithChildren","_super","parent","_this","_parent","_config","_interpolation","__makeNative","platformConfig","__getValue","parentValue","__attach","__addChild","__detach","__removeChild","__transformDataType","NativeAnimatedHelper","transformDataType","__getNativeConfig","validateInterpolation","type","AnimatedWithChildren","__createInterpolation"],"sources":["AnimatedInterpolation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n/* eslint no-bitwise: 0 */\n\n'use strict';\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\nimport type AnimatedNode from './AnimatedNode';\n\nimport normalizeColor from '../../StyleSheet/normalizeColor';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport invariant from 'invariant';\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType<OutputT: number | string> = $ReadOnly<{\n  inputRange: $ReadOnlyArray<number>,\n  outputRange: $ReadOnlyArray<OutputT>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n}>;\n\nconst linear = (t: number) => t;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createInterpolation<OutputT: number | string>(\n  config: InterpolationConfigType<OutputT>,\n): (input: number) => OutputT {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return (createInterpolationFromStringOutputRange((config: any)): any);\n  }\n\n  const outputRange: $ReadOnlyArray<number> = (config.outputRange: any);\n\n  const inputRange = config.inputRange;\n\n  if (__DEV__) {\n    checkInfiniteRange('outputRange', outputRange);\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n\n    invariant(\n      inputRange.length === outputRange.length,\n      'inputRange (' +\n        inputRange.length +\n        ') and outputRange (' +\n        outputRange.length +\n        ') must have the same length',\n    );\n  }\n\n  const easing = config.easing || linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return (interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    ): any);\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input: string): string {\n  let normalizedColor = normalizeColor(input);\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n\n  const r = (normalizedColor & 0xff000000) >>> 24;\n  const g = (normalizedColor & 0x00ff0000) >>> 16;\n  const b = (normalizedColor & 0x0000ff00) >>> 8;\n  const a = (normalizedColor & 0x000000ff) / 255;\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(\n  config: InterpolationConfigType<string>,\n): (input: number) => string {\n  let outputRange: Array<string> = (config.outputRange: any);\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n   * return `null`. Need to guard against this possibility. */\n  const outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `value.match()` can return\n     * `null`. Need to guard against this possibility. */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n\n  const interpolations = outputRange[0]\n    .match(stringShapeRegex)\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n     * return `null`. Need to guard against this possibility. */\n    /* $FlowFixMe[incompatible-call] (>=0.18.0): `outputRange[0].match()` can\n     * return `null`. Need to guard against this possibility. */\n    .map((value, i) => {\n      return createInterpolation({\n        ...config,\n        outputRange: outputRanges[i],\n      });\n    });\n\n  // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n  const shouldRound = isRgbOrRgba(outputRange[0]);\n\n  return input => {\n    let i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, () => {\n      let val = +interpolations[i++](input);\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range: string) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr: $ReadOnlyArray<string>) {\n  const pattern = arr[0].replace(stringShapeRegex, '');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      pattern === arr[i].replace(stringShapeRegex, ''),\n      'invalid pattern ' + arr[0] + ' and ' + arr[i],\n    );\n  }\n}\n\nfunction findRange(input: number, inputRange: $ReadOnlyArray<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  const message =\n    'inputRange must be monotonically non-decreasing ' + String(arr);\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], message);\n  }\n}\n\nfunction checkInfiniteRange(name: string, arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression\n     * below this comment, one or both of the operands may be something that\n     * doesn't cleanly convert to a string, like undefined, null, and object,\n     * etc. If you really mean this implicit string conversion, you can do\n     * something like String(myThing) */\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nexport default class AnimatedInterpolation<\n  OutputT: number | string,\n> extends AnimatedWithChildren {\n  // Export for testing.\n  static __createInterpolation: (\n    config: InterpolationConfigType<OutputT>,\n  ) => (input: number) => OutputT = createInterpolation;\n\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType<OutputT>;\n  _interpolation: (input: number) => OutputT;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType<OutputT>) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative(platformConfig: ?PlatformConfig) {\n    this._parent.__makeNative(platformConfig);\n    super.__makeNative(platformConfig);\n  }\n\n  __getValue(): number | string {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._interpolation(parentValue);\n  }\n\n  interpolate<NewOutputT: number | string>(\n    config: InterpolationConfigType<NewOutputT>,\n  ): AnimatedInterpolation<NewOutputT> {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __transformDataType(range: $ReadOnlyArray<OutputT>): Array<any> {\n    return range.map(NativeAnimatedHelper.transformDataType);\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n"],"mappings":"AAYA,YAAY;;AAAC,IAAAA,sBAAA,GAAAC,OAAA;AAAAC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,OAAA;AAAA,IAAAC,gBAAA,GAAAP,sBAAA,CAAAC,OAAA;AAAA,IAAAO,aAAA,GAAAR,sBAAA,CAAAC,OAAA;AAAA,IAAAQ,KAAA,GAAAT,sBAAA,CAAAC,OAAA;AAAA,IAAAS,UAAA,GAAAV,sBAAA,CAAAC,OAAA;AAAA,IAAAU,2BAAA,GAAAX,sBAAA,CAAAC,OAAA;AAAA,IAAAW,gBAAA,GAAAZ,sBAAA,CAAAC,OAAA;AAAA,IAAAY,gBAAA,GAAAb,sBAAA,CAAAC,OAAA;AAKb,IAAAa,eAAA,GAAAd,sBAAA,CAAAC,OAAA;AACA,IAAAc,qBAAA,GAAAf,sBAAA,CAAAC,OAAA;AACA,IAAAe,sBAAA,GAAAhB,sBAAA,CAAAC,OAAA;AACA,IAAAgB,UAAA,GAAAjB,sBAAA,CAAAC,OAAA;AAAkC,SAAAiB,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,OAAAX,gBAAA,CAAAN,OAAA,EAAAa,OAAA,GAAAK,MAAA,MAAAJ,yBAAA,QAAAK,SAAA,OAAAb,gBAAA,CAAAN,OAAA,QAAAoB,WAAA,EAAAF,MAAA,GAAAG,OAAA,CAAAC,SAAA,CAAAL,KAAA,EAAAM,SAAA,EAAAJ,SAAA,YAAAD,MAAA,GAAAD,KAAA,CAAAO,KAAA,OAAAD,SAAA,gBAAAlB,2BAAA,CAAAL,OAAA,QAAAkB,MAAA;AAAA,SAAAH,0BAAA,eAAAM,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAG,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAAC,SAAA,CAAAC,OAAA,CAAAC,IAAA,CAAAT,OAAA,CAAAC,SAAA,CAAAK,OAAA,8CAAAI,CAAA;AAAA,SAAAC,QAAAC,MAAA,EAAAC,cAAA,QAAAC,IAAA,GAAAvC,MAAA,CAAAuC,IAAA,CAAAF,MAAA,OAAArC,MAAA,CAAAwC,qBAAA,QAAAC,OAAA,GAAAzC,MAAA,CAAAwC,qBAAA,CAAAH,MAAA,GAAAC,cAAA,KAAAG,OAAA,GAAAA,OAAA,CAAAC,MAAA,WAAAC,GAAA,WAAA3C,MAAA,CAAA4C,wBAAA,CAAAP,MAAA,EAAAM,GAAA,EAAAE,UAAA,OAAAN,IAAA,CAAAO,IAAA,CAAAlB,KAAA,CAAAW,IAAA,EAAAE,OAAA,YAAAF,IAAA;AAAA,SAAAQ,cAAAC,MAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAtB,SAAA,CAAAuB,MAAA,EAAAD,CAAA,UAAAE,MAAA,WAAAxB,SAAA,CAAAsB,CAAA,IAAAtB,SAAA,CAAAsB,CAAA,QAAAA,CAAA,OAAAb,OAAA,CAAApC,MAAA,CAAAmD,MAAA,OAAAC,OAAA,WAAAC,GAAA,QAAA1C,gBAAA,CAAAP,OAAA,EAAA4C,MAAA,EAAAK,GAAA,EAAAF,MAAA,CAAAE,GAAA,SAAArD,MAAA,CAAAsD,yBAAA,GAAAtD,MAAA,CAAAuD,gBAAA,CAAAP,MAAA,EAAAhD,MAAA,CAAAsD,yBAAA,CAAAH,MAAA,KAAAf,OAAA,CAAApC,MAAA,CAAAmD,MAAA,GAAAC,OAAA,WAAAC,GAAA,IAAArD,MAAA,CAAAC,cAAA,CAAA+C,MAAA,EAAAK,GAAA,EAAArD,MAAA,CAAA4C,wBAAA,CAAAO,MAAA,EAAAE,GAAA,iBAAAL,MAAA;AAalC,IAAMQ,MAAM,GAAG,SAATA,MAAMA,CAAIC,CAAS;EAAA,OAAKA,CAAC;AAAA;AAM/B,SAASC,mBAAmBA,CAC1BC,MAAwC,EACZ;EAC5B,IAAIA,MAAM,CAACC,WAAW,IAAI,OAAOD,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IACnE,OAAQC,wCAAwC,CAAEF,MAAY,CAAC;EACjE;EAEA,IAAMC,WAAmC,GAAID,MAAM,CAACC,WAAiB;EAErE,IAAME,UAAU,GAAGH,MAAM,CAACG,UAAU;EAEpC,IAAIC,OAAO,EAAE;IACXC,kBAAkB,CAAC,aAAa,EAAEJ,WAAW,CAAC;IAC9CI,kBAAkB,CAAC,YAAY,EAAEF,UAAU,CAAC;IAC5CG,oBAAoB,CAACH,UAAU,CAAC;IAEhC,IAAAI,kBAAS,EACPJ,UAAU,CAACZ,MAAM,KAAKU,WAAW,CAACV,MAAM,EACxC,cAAc,GACZY,UAAU,CAACZ,MAAM,GACjB,qBAAqB,GACrBU,WAAW,CAACV,MAAM,GAClB,6BACJ,CAAC;EACH;EAEA,IAAMiB,MAAM,GAAGR,MAAM,CAACQ,MAAM,IAAIX,MAAM;EAEtC,IAAIY,eAAgC,GAAG,QAAQ;EAC/C,IAAIT,MAAM,CAACS,eAAe,KAAKC,SAAS,EAAE;IACxCD,eAAe,GAAGT,MAAM,CAACS,eAAe;EAC1C,CAAC,MAAM,IAAIT,MAAM,CAACW,WAAW,KAAKD,SAAS,EAAE;IAC3CD,eAAe,GAAGT,MAAM,CAACW,WAAW;EACtC;EAEA,IAAIC,gBAAiC,GAAG,QAAQ;EAChD,IAAIZ,MAAM,CAACY,gBAAgB,KAAKF,SAAS,EAAE;IACzCE,gBAAgB,GAAGZ,MAAM,CAACY,gBAAgB;EAC5C,CAAC,MAAM,IAAIZ,MAAM,CAACW,WAAW,KAAKD,SAAS,EAAE;IAC3CE,gBAAgB,GAAGZ,MAAM,CAACW,WAAW;EACvC;EAEA,OAAO,UAAAE,KAAK,EAAI;IACd,IAAAN,kBAAS,EACP,OAAOM,KAAK,KAAK,QAAQ,EACzB,qDACF,CAAC;IAED,IAAMC,KAAK,GAAGC,SAAS,CAACF,KAAK,EAAEV,UAAU,CAAC;IAC1C,OAAQa,WAAW,CACjBH,KAAK,EACLV,UAAU,CAACW,KAAK,CAAC,EACjBX,UAAU,CAACW,KAAK,GAAG,CAAC,CAAC,EACrBb,WAAW,CAACa,KAAK,CAAC,EAClBb,WAAW,CAACa,KAAK,GAAG,CAAC,CAAC,EACtBN,MAAM,EACNC,eAAe,EACfG,gBACF,CAAC;EACH,CAAC;AACH;AAEA,SAASI,WAAWA,CAClBH,KAAa,EACbI,QAAgB,EAChBC,QAAgB,EAChBC,SAAiB,EACjBC,SAAiB,EACjBZ,MAAiC,EACjCC,eAAgC,EAChCG,gBAAiC,EACjC;EACA,IAAIjD,MAAM,GAAGkD,KAAK;EAGlB,IAAIlD,MAAM,GAAGsD,QAAQ,EAAE;IACrB,IAAIR,eAAe,KAAK,UAAU,EAAE;MAClC,OAAO9C,MAAM;IACf,CAAC,MAAM,IAAI8C,eAAe,KAAK,OAAO,EAAE;MACtC9C,MAAM,GAAGsD,QAAQ;IACnB,CAAC,MAAM,IAAIR,eAAe,KAAK,QAAQ,EAAE,CAEzC;EACF;EAEA,IAAI9C,MAAM,GAAGuD,QAAQ,EAAE;IACrB,IAAIN,gBAAgB,KAAK,UAAU,EAAE;MACnC,OAAOjD,MAAM;IACf,CAAC,MAAM,IAAIiD,gBAAgB,KAAK,OAAO,EAAE;MACvCjD,MAAM,GAAGuD,QAAQ;IACnB,CAAC,MAAM,IAAIN,gBAAgB,KAAK,QAAQ,EAAE,CAE1C;EACF;EAEA,IAAIO,SAAS,KAAKC,SAAS,EAAE;IAC3B,OAAOD,SAAS;EAClB;EAEA,IAAIF,QAAQ,KAAKC,QAAQ,EAAE;IACzB,IAAIL,KAAK,IAAII,QAAQ,EAAE;MACrB,OAAOE,SAAS;IAClB;IACA,OAAOC,SAAS;EAClB;EAGA,IAAIH,QAAQ,KAAK,CAACI,QAAQ,EAAE;IAC1B1D,MAAM,GAAG,CAACA,MAAM;EAClB,CAAC,MAAM,IAAIuD,QAAQ,KAAKG,QAAQ,EAAE;IAChC1D,MAAM,GAAGA,MAAM,GAAGsD,QAAQ;EAC5B,CAAC,MAAM;IACLtD,MAAM,GAAG,CAACA,MAAM,GAAGsD,QAAQ,KAAKC,QAAQ,GAAGD,QAAQ,CAAC;EACtD;EAGAtD,MAAM,GAAG6C,MAAM,CAAC7C,MAAM,CAAC;EAGvB,IAAIwD,SAAS,KAAK,CAACE,QAAQ,EAAE;IAC3B1D,MAAM,GAAG,CAACA,MAAM;EAClB,CAAC,MAAM,IAAIyD,SAAS,KAAKC,QAAQ,EAAE;IACjC1D,MAAM,GAAGA,MAAM,GAAGwD,SAAS;EAC7B,CAAC,MAAM;IACLxD,MAAM,GAAGA,MAAM,IAAIyD,SAAS,GAAGD,SAAS,CAAC,GAAGA,SAAS;EACvD;EAEA,OAAOxD,MAAM;AACf;AAEA,SAAS2D,WAAWA,CAACT,KAAa,EAAU;EAC1C,IAAIU,eAAe,GAAG,IAAAC,uBAAc,EAACX,KAAK,CAAC;EAC3C,IAAIU,eAAe,KAAK,IAAI,IAAI,OAAOA,eAAe,KAAK,QAAQ,EAAE;IACnE,OAAOV,KAAK;EACd;EAEAU,eAAe,GAAGA,eAAe,IAAI,CAAC;EAEtC,IAAME,CAAC,GAAG,CAACF,eAAe,GAAG,UAAU,MAAM,EAAE;EAC/C,IAAMG,CAAC,GAAG,CAACH,eAAe,GAAG,UAAU,MAAM,EAAE;EAC/C,IAAMI,CAAC,GAAG,CAACJ,eAAe,GAAG,UAAU,MAAM,CAAC;EAC9C,IAAMK,CAAC,GAAG,CAACL,eAAe,GAAG,UAAU,IAAI,GAAG;EAE9C,iBAAeE,CAAC,UAAKC,CAAC,UAAKC,CAAC,UAAKC,CAAC;AACpC;AAEA,IAAMC,gBAAgB,GAAG,4CAA4C;AAUrE,SAAS3B,wCAAwCA,CAC/CF,MAAuC,EACZ;EAC3B,IAAIC,WAA0B,GAAID,MAAM,CAACC,WAAiB;EAC1D,IAAAM,kBAAS,EAACN,WAAW,CAACV,MAAM,IAAI,CAAC,EAAE,kBAAkB,CAAC;EACtDU,WAAW,GAAGA,WAAW,CAAC6B,GAAG,CAACR,WAAW,CAAC;EAC1CS,YAAY,CAAC9B,WAAW,CAAC;EAYzB,IAAM+B,YAAY,GAAG/B,WAAW,CAAC,CAAC,CAAC,CAACgC,KAAK,CAACJ,gBAAgB,CAAC,CAACC,GAAG,CAAC;IAAA,OAAM,EAAE;EAAA,EAAC;EACzE7B,WAAW,CAACR,OAAO,CAAC,UAAAjD,KAAK,EAAI;IAG3BA,KAAK,CAACyF,KAAK,CAACJ,gBAAgB,CAAC,CAACpC,OAAO,CAAC,UAACyC,MAAM,EAAE5C,CAAC,EAAK;MACnD0C,YAAY,CAAC1C,CAAC,CAAC,CAACH,IAAI,CAAC,CAAC+C,MAAM,CAAC;IAC/B,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAMC,cAAc,GAAGlC,WAAW,CAAC,CAAC,CAAC,CAClCgC,KAAK,CAACJ,gBAAgB,CAAC,CAKvBC,GAAG,CAAC,UAACtF,KAAK,EAAE8C,CAAC,EAAK;IACjB,OAAOS,mBAAmB,CAAAX,aAAA,CAAAA,aAAA,KACrBY,MAAM;MACTC,WAAW,EAAE+B,YAAY,CAAC1C,CAAC;IAAC,EAC7B,CAAC;EACJ,CAAC,CAAC;EAIJ,IAAM8C,WAAW,GAAGC,WAAW,CAACpC,WAAW,CAAC,CAAC,CAAC,CAAC;EAE/C,OAAO,UAAAY,KAAK,EAAI;IACd,IAAIvB,CAAC,GAAG,CAAC;IAIT,OAAOW,WAAW,CAAC,CAAC,CAAC,CAACqC,OAAO,CAACT,gBAAgB,EAAE,YAAM;MACpD,IAAIU,GAAG,GAAG,CAACJ,cAAc,CAAC7C,CAAC,EAAE,CAAC,CAACuB,KAAK,CAAC;MACrC,IAAIuB,WAAW,EAAE;QACfG,GAAG,GAAGjD,CAAC,GAAG,CAAC,GAAGkD,IAAI,CAACC,KAAK,CAACF,GAAG,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACF,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI;MAC/D;MACA,OAAOG,MAAM,CAACH,GAAG,CAAC;IACpB,CAAC,CAAC;EACJ,CAAC;AACH;AAEA,SAASF,WAAWA,CAACvB,KAAa,EAAE;EAClC,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAAC6B,UAAU,CAAC,KAAK,CAAC;AAC7D;AAEA,SAASZ,YAAYA,CAACa,GAA2B,EAAE;EACjD,IAAMC,OAAO,GAAGD,GAAG,CAAC,CAAC,CAAC,CAACN,OAAO,CAACT,gBAAgB,EAAE,EAAE,CAAC;EACpD,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsD,GAAG,CAACrD,MAAM,EAAE,EAAED,CAAC,EAAE;IACnC,IAAAiB,kBAAS,EACPsC,OAAO,KAAKD,GAAG,CAACtD,CAAC,CAAC,CAACgD,OAAO,CAACT,gBAAgB,EAAE,EAAE,CAAC,EAChD,kBAAkB,GAAGe,GAAG,CAAC,CAAC,CAAC,GAAG,OAAO,GAAGA,GAAG,CAACtD,CAAC,CAC/C,CAAC;EACH;AACF;AAEA,SAASyB,SAASA,CAACF,KAAa,EAAEV,UAAkC,EAAE;EACpE,IAAIb,CAAC;EACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,UAAU,CAACZ,MAAM,GAAG,CAAC,EAAE,EAAED,CAAC,EAAE;IAC1C,IAAIa,UAAU,CAACb,CAAC,CAAC,IAAIuB,KAAK,EAAE;MAC1B;IACF;EACF;EACA,OAAOvB,CAAC,GAAG,CAAC;AACd;AAEA,SAASgB,oBAAoBA,CAACsC,GAA2B,EAAE;EACzD,IAAArC,kBAAS,EAACqC,GAAG,CAACrD,MAAM,IAAI,CAAC,EAAE,0CAA0C,CAAC;EACtE,IAAMuD,OAAO,GACX,kDAAkD,GAAGJ,MAAM,CAACE,GAAG,CAAC;EAClE,KAAK,IAAItD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsD,GAAG,CAACrD,MAAM,EAAE,EAAED,CAAC,EAAE;IACnC,IAAAiB,kBAAS,EAACqC,GAAG,CAACtD,CAAC,CAAC,IAAIsD,GAAG,CAACtD,CAAC,GAAG,CAAC,CAAC,EAAEwD,OAAO,CAAC;EAC1C;AACF;AAEA,SAASzC,kBAAkBA,CAAC0C,IAAY,EAAEH,GAA2B,EAAE;EACrE,IAAArC,kBAAS,EAACqC,GAAG,CAACrD,MAAM,IAAI,CAAC,EAAEwD,IAAI,GAAG,gCAAgC,CAAC;EACnE,IAAAxC,kBAAS,EACPqC,GAAG,CAACrD,MAAM,KAAK,CAAC,IAAIqD,GAAG,CAAC,CAAC,CAAC,KAAK,CAACvB,QAAQ,IAAIuB,GAAG,CAAC,CAAC,CAAC,KAAKvB,QAAQ,EAM/D0B,IAAI,GAAG,kCAAkC,GAAGH,GAC9C,CAAC;AACH;AAAC,IAEoBI,qBAAqB,aAAAC,qBAAA;EAAA,IAAApG,UAAA,CAAAJ,OAAA,EAAAuG,qBAAA,EAAAC,qBAAA;EAAA,IAAAC,MAAA,GAAA7F,YAAA,CAAA2F,qBAAA;EAYxC,SAAAA,sBAAYG,MAAoB,EAAEnD,MAAwC,EAAE;IAAA,IAAAoD,KAAA;IAAA,IAAA1G,gBAAA,CAAAD,OAAA,QAAAuG,qBAAA;IAC1EI,KAAA,GAAAF,MAAA,CAAA3E,IAAA;IACA6E,KAAA,CAAKC,OAAO,GAAGF,MAAM;IACrBC,KAAA,CAAKE,OAAO,GAAGtD,MAAM;IACrBoD,KAAA,CAAKG,cAAc,GAAGxD,mBAAmB,CAACC,MAAM,CAAC;IAAC,OAAAoD,KAAA;EACpD;EAAC,IAAAzG,aAAA,CAAAF,OAAA,EAAAuG,qBAAA;IAAAtD,GAAA;IAAAlD,KAAA,EAED,SAAAgH,aAAaC,cAA+B,EAAE;MAC5C,IAAI,CAACJ,OAAO,CAACG,YAAY,CAACC,cAAc,CAAC;MACzC,IAAA7G,KAAA,CAAAH,OAAA,MAAAM,gBAAA,CAAAN,OAAA,EAAAuG,qBAAA,CAAA3E,SAAA,yBAAAE,IAAA,OAAmBkF,cAAc;IACnC;EAAC;IAAA/D,GAAA;IAAAlD,KAAA,EAED,SAAAkH,WAAA,EAA8B;MAC5B,IAAMC,WAAmB,GAAG,IAAI,CAACN,OAAO,CAACK,UAAU,CAAC,CAAC;MACrD,IAAAnD,kBAAS,EACP,OAAOoD,WAAW,KAAK,QAAQ,EAC/B,oDACF,CAAC;MACD,OAAO,IAAI,CAACJ,cAAc,CAACI,WAAW,CAAC;IACzC;EAAC;IAAAjE,GAAA;IAAAlD,KAAA,EAED,SAAAwE,YACEhB,MAA2C,EACR;MACnC,OAAO,IAAIgD,qBAAqB,CAAC,IAAI,EAAEhD,MAAM,CAAC;IAChD;EAAC;IAAAN,GAAA;IAAAlD,KAAA,EAED,SAAAoH,SAAA,EAAiB;MACf,IAAI,CAACP,OAAO,CAACQ,UAAU,CAAC,IAAI,CAAC;IAC/B;EAAC;IAAAnE,GAAA;IAAAlD,KAAA,EAED,SAAAsH,SAAA,EAAiB;MACf,IAAI,CAACT,OAAO,CAACU,aAAa,CAAC,IAAI,CAAC;MAChC,IAAAnH,KAAA,CAAAH,OAAA,MAAAM,gBAAA,CAAAN,OAAA,EAAAuG,qBAAA,CAAA3E,SAAA,qBAAAE,IAAA;IACF;EAAC;IAAAmB,GAAA;IAAAlD,KAAA,EAED,SAAAwH,oBAAoBlD,KAA8B,EAAc;MAC9D,OAAOA,KAAK,CAACgB,GAAG,CAACmC,6BAAoB,CAACC,iBAAiB,CAAC;IAC1D;EAAC;IAAAxE,GAAA;IAAAlD,KAAA,EAED,SAAA2H,kBAAA,EAAyB;MACvB,IAAI/D,OAAO,EAAE;QACX6D,6BAAoB,CAACG,qBAAqB,CAAC,IAAI,CAACd,OAAO,CAAC;MAC1D;MAEA,OAAO;QACLnD,UAAU,EAAE,IAAI,CAACmD,OAAO,CAACnD,UAAU;QAEnCF,WAAW,EAAE,IAAI,CAAC+D,mBAAmB,CAAC,IAAI,CAACV,OAAO,CAACrD,WAAW,CAAC;QAC/DQ,eAAe,EACb,IAAI,CAAC6C,OAAO,CAAC7C,eAAe,IAAI,IAAI,CAAC6C,OAAO,CAAC3C,WAAW,IAAI,QAAQ;QACtEC,gBAAgB,EACd,IAAI,CAAC0C,OAAO,CAAC1C,gBAAgB,IAAI,IAAI,CAAC0C,OAAO,CAAC3C,WAAW,IAAI,QAAQ;QACvE0D,IAAI,EAAE;MACR,CAAC;IACH;EAAC;EAAA,OAAArB,qBAAA;AAAA,EAjEOsB,8BAAoB;AAAA/H,OAAA,CAAAE,OAAA,GAAAuG,qBAAA;AAFTA,qBAAqB,CAIjCuB,qBAAqB,GAEMxE,mBAAmB"}