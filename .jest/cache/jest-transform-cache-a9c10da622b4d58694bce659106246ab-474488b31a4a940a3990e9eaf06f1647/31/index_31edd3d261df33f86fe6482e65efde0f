b665bf621594e579f91022a61b240017
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _hooksRedux = require("../../aplication/hooks-redux");
var _comp = _interopRequireDefault(require("../modal/comp.modal"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var ButtonsOpstions = function ButtonsOpstions(_ref) {
  var navigation = _ref.navigation;
  var dataAuth = (0, _hooksRedux.useAppSelector)(function (state) {
    return {
      config: state.configurationapp,
      task: state.tarkReducer
    };
  });
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    modalVisible = _useState2[0],
    setModalVisible = _useState2[1];
  return _react["default"].createElement(_reactNative.View, {
    style: styles.container,
    "data-testid": "buttonsComp"
  }, _react["default"].createElement(_reactNative.Pressable, {
    style: styles.button,
    onPress: function onPress() {
      navigation.navigate('Task-List');
    }
  }, _react["default"].createElement(_reactNative.Text, {
    style: styles.text
  }, "Task List - cant : ", dataAuth.task.list.length)), _react["default"].createElement(_reactNative.Pressable, {
    style: styles.button,
    onPress: function onPress() {
      setModalVisible(true);
    }
  }, _react["default"].createElement(_reactNative.Text, {
    style: styles.text
  }, "Add Task")), _react["default"].createElement(_comp["default"], {
    setModalVisible: setModalVisible,
    modalVisible: modalVisible
  }));
};
var styles = _reactNative.StyleSheet.create({
  container: {
    marginTop: '70%',
    alignItems: 'center',
    justifyContent: 'center'
  },
  button: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 32,
    marginBottom: 20,
    borderRadius: 4,
    elevation: 3,
    backgroundColor: 'black'
  },
  text: {
    fontSize: 16,
    lineHeight: 21,
    fontWeight: 'bold',
    letterSpacing: 0.25,
    color: 'white'
  }
});
var _default = ButtonsOpstions;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,