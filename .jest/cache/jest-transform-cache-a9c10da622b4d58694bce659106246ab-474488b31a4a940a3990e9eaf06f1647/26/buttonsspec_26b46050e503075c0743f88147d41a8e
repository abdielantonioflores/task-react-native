2e70e76adf743d1a2f542a895b1134ae
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _globals = require("@jest/globals");
var _react2 = require("@testing-library/react");
var _native = require("@react-navigation/native");
require("@testing-library/jest-dom");
var _buttons = _interopRequireDefault(require("../app/components/buttons"));
var _store = _interopRequireDefault(require("../app/store"));
var _reactRedux = require("react-redux");
var _jestFetchMock = _interopRequireDefault(require("jest-fetch-mock"));
var _reactNative = require("react-native");
beforeAll(function () {
  _jestFetchMock["default"].enableMocks();
});
(0, _globals.describe)('Componet <Buttons/> ', function () {
  it('Carga de Componente  de manera correcta ', (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
    var navigation, _render, getByTestId;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _jestFetchMock["default"].mockResponse(JSON.stringify({}));
          navigation = _native.useNavigation;
          _render = (0, _react2.render)(_react["default"].createElement(_reactNative.View, null, _react["default"].createElement(_reactRedux.Provider, {
            store: _store["default"]
          }, _react["default"].createElement(_buttons["default"], {
            navigation: navigation
          })))), getByTestId = _render.getByTestId;
          (0, _globals.expect)(getByTestId('buttonsComp')).toBeInTheDocument();
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9nbG9iYWxzIiwiX3JlYWN0MiIsIl9uYXRpdmUiLCJfYnV0dG9ucyIsIl9zdG9yZSIsIl9yZWFjdFJlZHV4IiwiX2plc3RGZXRjaE1vY2siLCJfcmVhY3ROYXRpdmUiLCJiZWZvcmVBbGwiLCJmZXRjaE1vY2siLCJlbmFibGVNb2NrcyIsImRlc2NyaWJlIiwiaXQiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVnZW5lcmF0b3IiLCJtYXJrIiwiX2NhbGxlZSIsIm5hdmlnYXRpb24iLCJfcmVuZGVyIiwiZ2V0QnlUZXN0SWQiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwibW9ja1Jlc3BvbnNlIiwiSlNPTiIsInN0cmluZ2lmeSIsInVzZU5hdmlnYXRpb24iLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiVmlldyIsIlByb3ZpZGVyIiwic3RvcmUiLCJleHBlY3QiLCJ0b0JlSW5UaGVEb2N1bWVudCIsInN0b3AiXSwic291cmNlcyI6WyJidXR0b25zLnNwZWMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGRlc2NyaWJlLCBleHBlY3QsIHRlc3QgfSBmcm9tICdAamVzdC9nbG9iYWxzJztcclxuaW1wb3J0IHsgYWN0IH0gZnJvbSAncmVhY3QtZG9tL3Rlc3QtdXRpbHMnO1xyXG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XHJcbmltcG9ydCB1c2VyRXZlbnQgZnJvbSAnQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50J1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0aW9uIH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcclxuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJ1xyXG5pbXBvcnQgQnV0dG9uc09wc3Rpb25zIGZyb20gJy4uL2FwcC9jb21wb25lbnRzL2J1dHRvbnMnXHJcbmltcG9ydCBzdG9yZSBmcm9tIFwiLi4vYXBwL3N0b3JlXCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbmltcG9ydCBmZXRjaE1vY2sgZnJvbSAnamVzdC1mZXRjaC1tb2NrJztcclxuaW1wb3J0IHsgdXNlQXBwRGlzcGF0Y2gsIHVzZUFwcFNlbGVjdG9yIH0gZnJvbSAnLi4vYXBwL2FwbGljYXRpb24vaG9va3MtcmVkdXgnXHJcbmltcG9ydCB7IHNldEFkZFRhc2sgfSBmcm9tICcuLi9hcHAvc2xpY2UvVGFza0xpc3RBcHAnXHJcbmltcG9ydCB7IHNldElzQXV0aGV0aWNhdGUgfSBmcm9tICcuLi9hcHAvc2xpY2UvY29uZmlndXJhdGlvbidcclxuaW1wb3J0IHsgVmlldyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmJlZm9yZUFsbCgoKSA9PiB7XHJcbiAgZmV0Y2hNb2NrLmVuYWJsZU1vY2tzKCk7XHJcblxyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdDb21wb25ldCA8QnV0dG9ucy8+ICcsICgpID0+IHtcclxuICBpdCgnQ2FyZ2EgZGUgQ29tcG9uZW50ZSAgZGUgbWFuZXJhIGNvcnJlY3RhICcsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIGxldCBkaXNwYXRjaCA9IHVzZUFwcERpc3BhdGNoO1xyXG4gICAgZmV0Y2hNb2NrLm1vY2tSZXNwb25zZShKU09OLnN0cmluZ2lmeSh7fSkpO1xyXG5cclxuICAgIGxldCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjtcclxuXHJcblxyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxyXG4gICAgICA8Vmlldz5cclxuICAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgICA8QnV0dG9uc09wc3Rpb25zIG5hdmlnYXRpb249e25hdmlnYXRpb259IC8+XHJcbiAgICAgICAgPC9Qcm92aWRlcj5cclxuICAgICAgPC9WaWV3PlxyXG5cclxuICAgIClcclxuXHJcblxyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdidXR0b25zQ29tcCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG5cclxuICB9KVxyXG5cclxuXHJcbiAgXHJcblxyXG59KVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsUUFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBRUEsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBQ0FBLE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxNQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFDQSxJQUFBTyxjQUFBLEdBQUFSLHNCQUFBLENBQUFDLE9BQUE7QUFJQSxJQUFBUSxZQUFBLEdBQUFSLE9BQUE7QUFDQVMsU0FBUyxDQUFDLFlBQU07RUFDZEMseUJBQVMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7QUFFekIsQ0FBQyxDQUFDO0FBRUYsSUFBQUMsaUJBQVEsRUFBQyxzQkFBc0IsRUFBRSxZQUFNO0VBQ3JDQyxFQUFFLENBQUMsMENBQTBDLE1BQUFDLGtCQUFBLGFBQUFDLFlBQUEsWUFBQUMsSUFBQSxDQUFFLFNBQUFDLFFBQUE7SUFBQSxJQUFBQyxVQUFBLEVBQUFDLE9BQUEsRUFBQUMsV0FBQTtJQUFBLE9BQUFMLFlBQUEsWUFBQU0sSUFBQSxVQUFBQyxTQUFBQyxRQUFBO01BQUEsa0JBQUFBLFFBQUEsQ0FBQUMsSUFBQSxHQUFBRCxRQUFBLENBQUFFLElBQUE7UUFBQTtVQUU3Q2YseUJBQVMsQ0FBQ2dCLFlBQVksQ0FBQ0MsSUFBSSxDQUFDQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztVQUV0Q1YsVUFBVSxHQUFHVyxxQkFBYTtVQUFBVixPQUFBLEdBR04sSUFBQVcsY0FBTSxFQUM1QmhDLE1BQUEsWUFBQWlDLGFBQUEsQ0FBQ3ZCLFlBQUEsQ0FBQXdCLElBQUksUUFDSGxDLE1BQUEsWUFBQWlDLGFBQUEsQ0FBQ3pCLFdBQUEsQ0FBQTJCLFFBQVE7WUFBQ0MsS0FBSyxFQUFFQTtVQUFNLEdBQ3ZCcEMsTUFBQSxZQUFBaUMsYUFBQSxDQUFDM0IsUUFBQSxXQUFlO1lBQUNjLFVBQVUsRUFBRUE7VUFBVyxDQUFFLENBQ2hDLENBQ04sQ0FFUixDQUFDLEVBUE9FLFdBQVcsR0FBQUQsT0FBQSxDQUFYQyxXQUFXO1VBVW5CLElBQUFlLGVBQU0sRUFBQ2YsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUNnQixpQkFBaUIsQ0FBQyxDQUFDO1FBQUM7UUFBQTtVQUFBLE9BQUFiLFFBQUEsQ0FBQWMsSUFBQTtNQUFBO0lBQUEsR0FBQXBCLE9BQUE7RUFBQSxDQUV4RCxHQUFDO0FBS0osQ0FBQyxDQUFDIn0=